<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%- title %></title>

    <link rel="stylesheet" href="css/reset.css" />
    <link rel="stylesheet" href="css/style1.css" />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <aside><%- include('navSide') %> 
        <div id="rooms"><%- include('rooms') %></div>
    </aside>
    <%- body %>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
    const socket = io();
    const messageInput = document.getElementById('messageInput');
    const messageArea = document.getElementById('messageArea');
    const chatForm = document.getElementById('chatForm');
    const roomName = document.querySelector('.room-title h1');
    let chats;
    let currentRoom = '';
    let roomType
    let users = <%- JSON.stringify(users) %>;
    

    chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        fetch('/sendChat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                chat: messageInput.value,
                city: currentRoom,
                roomType
            })
        });

        const message = messageInput.value.trim();

        if (message) {
            socket.emit('chatMessage', message);
            messageInput.value = '';
        }
    });
    socket.on('chatMessage', (msg) => {
        console.log(`Incoming message from server:`, msg);
    if (msg && msg.username && msg.message) {
        console.log(`Rendering message from: ${msg.username} with content: ${msg.message}`);
        const existingMessages = document.querySelectorAll('.chat-detail');
        let messageAlreadyExists = false;
        existingMessages.forEach(messageDetail => {
            const messageText = messageDetail.querySelector('.chat-text p').innerText;
            if (messageText === msg.message) {
                messageAlreadyExists = true;
            }
        });

        if (!messageAlreadyExists) {

            const chatDiv = document.createElement('div');
            chatDiv.classList.add('chat');

            const chatIconDiv = document.createElement('div');
            chatIconDiv.classList.add('chat-icon');
            const avatar = users.avatar ? users.avatar : 'img/icon.jpg';
            chatIconDiv.innerHTML = `<img src="${avatar}" alt=""/>`;

            const chatDetailDiv = document.createElement('div');
            chatDetailDiv.classList.add('chat-detail');

            const chatDateDiv = document.createElement('div');
            chatDateDiv.classList.add('chat-date');
            chatDateDiv.innerHTML = `<p>${msg.username} <span>${msg.timestamp}</span></p>`;

            const chatTextDiv = document.createElement('div');
            chatTextDiv.classList.add('chat-text');
            chatTextDiv.innerHTML = `<p>${msg.message}</p>`;
            chatDetailDiv.appendChild(chatDateDiv);
            chatDetailDiv.appendChild(chatTextDiv);
            chatDiv.appendChild(chatIconDiv);
            chatDiv.appendChild(chatDetailDiv);


            messageArea.appendChild(chatDiv);
            messageArea.scrollTop = messageArea.scrollHeight;
        }
        } else {
        console.error('Received malformed message:', msg);
        }
    });



    let rooms = <%- JSON.stringify(rooms) %>;
    console.log(rooms);

    function showCities(province) {
        const cityRoomList = document.getElementById('cityRoomList');
        cityRoomList.innerHTML = ''; 
        const filteredRooms = rooms.filter(room => room.province === province);
        filteredRooms.forEach(room => {
            const roomElement = document.createElement('div');
            roomElement.classList.add('room');
            roomElement.innerHTML = `<a href='javascript:void(0)' onclick="showCityRoom('${room.city}'); getMessage('${room.city}');updateSession('public');"><h3># | ${room.city}</h3></a> `;
            cityRoomList.appendChild(roomElement);
        });
    }
    function updateSession(roomStatus, targetUser) {
        axios.post('/updateSession', {
            roomStatus,
            targetUser: targetUser !== undefined ? targetUser : null
        })
        .then(res => console.log('success', res))
        .catch(err => console.log('failed to update session', err));
      }



    function getMessage(city) {

        messageArea.innerHTML = '';

        return fetch('/getMessage', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                city: city
            })
        })
        .then(response => response.json())
        .then(result => {
            const messages = result.data;
            messages.forEach(msg => {
                const chatDiv = document.createElement('div');
                chatDiv.classList.add('chat');
                chatDiv.dataset.displayname = msg.sender.displayName || 'not set';
                chatDiv.dataset.username = msg.sender.username;
                const chatIconDiv = document.createElement('div');
                chatIconDiv.classList.add('chat-icon');
                const avatar = msg.sender.avatar ? msg.sender.avatar : 'img/icon.jpg';
                chatIconDiv.innerHTML = `<a href="javascript:void(0);"><img src="${avatar}" alt=""/></a>`;
                const chatDetailDiv = document.createElement('div');
                chatDetailDiv.classList.add('chat-detail');

                const chatDateDiv = document.createElement('div');
                chatDateDiv.classList.add('chat-date');
                chatDateDiv.innerHTML = `<p>${msg.sender.username}<span>${new Date(msg.createdAt).toLocaleString()}</span></p>`;

                const chatTextDiv = document.createElement('div');
                chatTextDiv.classList.add('chat-text');
                chatTextDiv.innerHTML = `<p>${msg.message}</p>`;

                chatDetailDiv.appendChild(chatDateDiv);
                chatDetailDiv.appendChild(chatTextDiv);
                chatDiv.appendChild(chatIconDiv);
                chatDiv.appendChild(chatDetailDiv);
                messageArea.appendChild(chatDiv);
            });

            messageArea.scrollTop = messageArea.scrollHeight;
            chats = document.querySelectorAll('.chat');

            getAllChats(chats)
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }





const icons = document.querySelectorAll('.icon');
icons.forEach(icon => {
    icon.addEventListener('click', function () {
        roomName.innerHTML = '';
        roomName.innerHTML = 'City Room';
    });
});

function showCityRoom(city) {
    const nameRoom = document.querySelector('.name-room');

    roomName.innerHTML = 'City Room';
    nameRoom.innerHTML = `<h1># | ${city}</h1>`;
    currentRoom = city;
    roomType = 'public';
}


document.querySelector("form.modal-form").addEventListener("submit", function (event) {
        event.preventDefault();
        const selectedProvince = this.querySelector('select[name="province"]').value;


        const provinceInitials = selectedProvince
        .split(" ")
        .map(word => word.charAt(0).toUpperCase())
        .join("");
        const nav = document.querySelector(".nav-side");
        const newIconDiv = document.createElement("div");
        newIconDiv.classList.add("nav-item");

        newIconDiv.innerHTML = `
        <div class="white-expand"></div>
        <div class="icon">
        <a href="javascript:void(0);" class="icon" data-id="${selectedProvince}" onclick="showCities('${selectedProvince}')">
        <h1>${provinceInitials}</h1>
        </a>
        </div>
        `;


        nav.insertBefore(newIconDiv, document.querySelector(".open-modal-btn"));

        fetch("/addRoom", {
            method: "POST",
            headers: {
            "Content-Type": "application/json",
            },
            body: JSON.stringify({ province: selectedProvince }),
        })
        .then((response) => response.json())
        .then((data) => {
            console.log("Room and User updated:", data);
        })
        .catch((error) => console.error("Error:", error));
        });

        const modal = document.getElementById("myModal");
        const openModalBtn = document.getElementById("openModalBtn");
        const closeModalBtn = document.querySelector(".close");

        openModalBtn.addEventListener("click", function () {
            console.log("hello");
            modal.style.display = "flex";
        });

        closeModalBtn.onclick = function () {
            modal.style.display = "none";
        };

        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
        }
};
document.getElementById("addRoomForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const province = document.getElementById("provinceSelect").value;

        try {
            const response = await fetch("/add-room", {
                method: "POST",
                headers: {
                "Content-Type": "application/json",
                },
                body: JSON.stringify({ province }),
            });

            const result = await response.json();

            if (result.success) {
                const newIcon = document.createElement("i");
                newIcon.classList.add("bx", "bx-check-circle");
                document.querySelector(".nav-side").appendChild(newIcon);
            } else {
                console.error(result.message);
            }
        } catch (error) {
            console.error("Error:", error);
        }
        });
        const iconChat = document.querySelector('.private-chat')


        iconChat.addEventListener('click', () => {
        roomName.innerHTML = 'Direct Message';
});
function getAllChats(chats) {
    const dmForm = document.querySelector('.direct-msg-form');
    const displayNameField = dmForm.querySelector('h1:nth-child(1)');
    const usernameField = dmForm.querySelector('h1:nth-child(2)');
    const messageInput = dmForm.querySelector('input[type="text"]');
    const targetUsernameInput = document.getElementById('targetUsername');

    chats.forEach(chat => {
        chat.addEventListener('click', function(e) {
            e.stopPropagation();
            const displayName = chat.dataset.displayname;
            const username = chat.dataset.username;

            displayNameField.textContent = displayName;
            usernameField.textContent = username;
            messageInput.placeholder = `Message @${username}`;
            targetUsernameInput.value = username;

            dmForm.style.display = 'flex';
        });
    });

}
    const dmForm = document.getElementById('dmForm');
    const dmMsgInput = document.getElementById('directMessageInput');
    const targetUsernameInput = document.getElementById('targetUsername');
    const dmFormContainer = document.querySelector('.direct-msg-form');
    dmForm.addEventListener('submit', (e) => {
        e.preventDefault();

        const message = dmMsgInput.value;
        const targetUsername = targetUsernameInput.value;


        fetch('/directMessage', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                chat: message,
                targetUsername: targetUsername,
            })
        })
        .then(response => response.json())
        .then(data => {

            console.log('Pesan berhasil dikirim:', data);
        })
        .catch(error => {
            console.error('Gagal mengirim pesan:', error);
        });
        dmFormContainer.style.display = 'none'
    });
    function hideForm(e) {
    // Cek apakah klik bukan di dalam form
    if (dmFormContainer.style.display === 'flex' && !dmFormContainer.contains(e.target)) {
        dmFormContainer.style.display = 'none';
    }
}

document.addEventListener('click', hideForm);
function showDm() {
    const rooms = document.querySelector('.rooms');
    rooms.innerHTML = '';

    axios.get('/getAllDm')
    .then(res => {
        let data = res.data.data;
        console.log(data);
        if(data.length == 0) {
            rooms.innerHTML = '<h1> No DM Chat </h1>'
        }

        // Filter pengguna unik berdasarkan username
        const uniqueUsers = data.filter((user, index, self) =>
            index === self.findIndex((u) => u.receiver.username === user.receiver.username)
        );

        uniqueUsers.forEach(user => {
            rooms.innerHTML += `
            <a href='javascript:void(0);' onclick="getMsgById('${user.receiver._id}');updateSession('private', '${user.receiver.username}');" class="room">
                <div class="user-dm">
                    <div class="user-img">
                        <img src="${user.receiver.avatar || 'img/icon.jpg'}" alt="Profile" />
                    </div>
                    <div class="user-text">
                        <h1>${user.receiver.username || 'not set'}</h1>
                    </div>
                </div>
            </a>`;
        });
    })
    .catch(error => {
        console.error('Error:', error);
    });

      }

      function getMsgById(targetId) {
          console.log(targetId);
          messageArea.innerHTML = ''
          axios.post('/getMsgById',{
              targetId
          })
          .then(res => {
              let data = res.data.data;
              console.log(data)
              const messages = data;
                messages.forEach(msg => {
                    const chatDiv = document.createElement('div');
                    chatDiv.classList.add('chat');
                    chatDiv.dataset.displayname = msg.sender.displayName || 'not set';
                    chatDiv.dataset.username = msg.sender.username;
                    const chatIconDiv = document.createElement('div');
                    chatIconDiv.classList.add('chat-icon');
                    const avatar = msg.sender.avatar ? msg.sender.avatar : 'img/icon.jpg';
                    chatIconDiv.innerHTML = `<a href="javascript:void(0);"><img src="${avatar}" alt=""/></a>`;
                    const chatDetailDiv = document.createElement('div');
                    chatDetailDiv.classList.add('chat-detail');

                    const chatDateDiv = document.createElement('div');
                    chatDateDiv.classList.add('chat-date');
                    chatDateDiv.innerHTML = `<p>${msg.sender.username}<span>${new Date(msg.createdAt).toLocaleString()}</span></p>`;

                    const chatTextDiv = document.createElement('div');
                    chatTextDiv.classList.add('chat-text');
                    chatTextDiv.innerHTML = `<p>${msg.message}</p>`;

                    chatDetailDiv.appendChild(chatDateDiv);
                    chatDetailDiv.appendChild(chatTextDiv);
                    chatDiv.appendChild(chatIconDiv);
                    chatDiv.appendChild(chatDetailDiv);

                    messageArea.appendChild(chatDiv);
            });

            messageArea.scrollTop = messageArea.scrollHeight;

            chats = document.querySelectorAll('.chat');

          })
      }

    </script>
  </body>
</html>
