<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%- title %></title>

    <link rel="stylesheet" href="css/reset.css" />
    <link rel="stylesheet" href="css/style1.css" />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <aside><%- include('navSide') %> <%- include('rooms') %></aside>
    <%- body %>
    <script src="/socket.io/socket.io.js"></script>

    <script>
                  const socket = io();

                  // Get DOM elements
                  const messageInput = document.getElementById('messageInput');
                  const messageArea = document.getElementById('messageArea');
                  const chatForm = document.getElementById('chatForm');
                  let currentRoom = '';
                  let roomType = '';
                  let users = <%- JSON.stringify(users) %>;

                  chatForm.addEventListener('submit', (e) => {
                      e.preventDefault();
                      fetch('/sendChat', {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                              chat: messageInput.value,
                              city: currentRoom,
                              roomType
                          })
                      });

                      // Get the message text
                      const message = messageInput.value.trim();

                      if (message) {
                          // Send only the message to the server (no need for username or timestamp)
                          socket.emit('chatMessage', message);

                          // Clear input field after sending
                          messageInput.value = '';
                      }
                  });

                  // Listen for incoming chat messages
                  socket.on('chatMessage', (msg) => {
    console.log(`Incoming message from server:`, msg);

    // Check if the message data contains the username and message content
    if (msg && msg.username && msg.message) {
        console.log(`Rendering message from: ${msg.username} with content: ${msg.message}`);

        // Optional: Check if the same message already exists in the chat area
        const existingMessages = document.querySelectorAll('.chat-detail');
        let messageAlreadyExists = false;
        existingMessages.forEach(messageDetail => {
            const messageText = messageDetail.querySelector('.chat-text p').innerText;
            if (messageText === msg.message) {
                messageAlreadyExists = true;
            }
        });

        if (!messageAlreadyExists) {
            // Create chat element
            const chatDiv = document.createElement('div');
            chatDiv.classList.add('chat');

            const chatIconDiv = document.createElement('div');
            chatIconDiv.classList.add('chat-icon');
            const avatar = users.avatar ? users.avatar : 'img/icon.jpg';
            chatIconDiv.innerHTML = `<img src="${avatar}" alt=""/>`;

            const chatDetailDiv = document.createElement('div');
            chatDetailDiv.classList.add('chat-detail');

            const chatDateDiv = document.createElement('div');
            chatDateDiv.classList.add('chat-date');
            chatDateDiv.innerHTML = `<p>${msg.username} <span>${msg.timestamp}</span></p>`;

            const chatTextDiv = document.createElement('div');
            chatTextDiv.classList.add('chat-text');
            chatTextDiv.innerHTML = `<p>${msg.message}</p>`;

            // Assemble chat message
            chatDetailDiv.appendChild(chatDateDiv);
            chatDetailDiv.appendChild(chatTextDiv);
            chatDiv.appendChild(chatIconDiv);
            chatDiv.appendChild(chatDetailDiv);

            // Append message to chat area
            messageArea.appendChild(chatDiv);

            // Scroll to the bottom of the chat area
            setTimeout(() => {
                messageArea.scrollTop = messageArea.scrollHeight;
            }, 100);
        }
    } else {
        console.error('Received malformed message:', msg);
    }
});



                  let rooms = <%- JSON.stringify(rooms) %>;
                  console.log(rooms);

                  function showCities(province) {
                      const cityRoomList = document.getElementById('cityRoomList');
                      cityRoomList.innerHTML = ''; // Kosongkan konten sebelumnya

                      // Filter rooms berdasarkan provinsi yang diklik
                      const filteredRooms = rooms.filter(room => room.province === province);

                      // Tampilkan kota dari provinsi yang dipilih
                      filteredRooms.forEach(room => {
                          const roomElement = document.createElement('div');
                          roomElement.classList.add('room');
                          roomElement.innerHTML = `<a href='javascript:void(0)' onclick="showCityRoom('${room.city}'); getMessage('${room.city}');"><h3># | ${room.city}</h3></a> `;
                          cityRoomList.appendChild(roomElement);
                      });
                  }

                  function getMessage(city) {
                      // Kosongkan pesan sebelumnya sebelum menambahkan pesan baru
                      messageArea.innerHTML = '';

                      fetch('/getMessage', {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                              city: city
                          })
                      })
                      .then(response => response.json())
                      .then(result => {
                          const messages = result.data;
                          messages.forEach(msg => {
                              const chatDiv = document.createElement('div');
                              chatDiv.classList.add('chat');

                              const chatIconDiv = document.createElement('div');
                              chatIconDiv.classList.add('chat-icon');
                              const avatar = msg.sender.avatar ? msg.sender.avatar : 'img/icon.jpg';
                              chatIconDiv.innerHTML = `<img src="${avatar}" alt=""/>`;
                              const chatDetailDiv = document.createElement('div');
                              chatDetailDiv.classList.add('chat-detail');

                              const chatDateDiv = document.createElement('div');
                              chatDateDiv.classList.add('chat-date');
                              chatDateDiv.innerHTML = `<p>${msg.sender.username}<span>${new Date(msg.createdAt).toLocaleString()}</span></p>`;

                              const chatTextDiv = document.createElement('div');
                              chatTextDiv.classList.add('chat-text');
                              chatTextDiv.innerHTML = `<p>${msg.message}</p>`;

                              // Rakit pesan chat
                              chatDetailDiv.appendChild(chatDateDiv);
                              chatDetailDiv.appendChild(chatTextDiv);
                              chatDiv.appendChild(chatIconDiv);
                              chatDiv.appendChild(chatDetailDiv);

                              // Tambahkan pesan ke area chat
                              messageArea.appendChild(chatDiv);
                          });

                          // Scroll to the bottom of the chat area after loading old messages
                          messageArea.scrollTop = messageArea.scrollHeight;
                      })
                      .catch(error => {
                          console.error('Error:', error);
                      });
                  }

                  function showCityRoom(city) {
                      const nameRoom = document.querySelector('.name-room');
                      nameRoom.innerHTML = `<h1># | ${city}</h1>`;
                      currentRoom = city;
                      roomType = 'public';
                  }

                  // Modal form submit logic
                  document.querySelector("form.modal-form").addEventListener("submit", function (event) {
                      event.preventDefault(); // Prevent form submission to handle asynchronously
                      const selectedProvince = this.querySelector('select[name="province"]').value;

                      // Extract initials from the selected province
                      const provinceInitials = selectedProvince
                          .split(" ")
                          .map(word => word.charAt(0).toUpperCase())
                          .join("");

                      // Tambahkan icon baru ke dalam nav
                      const nav = document.querySelector(".nav-side");
                      const newIconDiv = document.createElement("div");
                      newIconDiv.classList.add("nav-item");

                      // Membuat elemen icon baru dengan template literals dan `provinceInitials`
                      newIconDiv.innerHTML = `
                          <div class="white-expand"></div>
                          <div class="icon">
                              <a href="javascript:void(0);" class="icon" data-id="${selectedProvince}" onclick="showCities('${selectedProvince}')">
                                  <h1>${provinceInitials}</h1>
                              </a>
                          </div>
                      `;

                      // Sisipkan ikon baru ke dalam navigasi
                      nav.insertBefore(newIconDiv, document.querySelector(".open-modal-btn"));

                      fetch("/addRoom", {
                          method: "POST",
                          headers: {
                              "Content-Type": "application/json",
                          },
                          body: JSON.stringify({ province: selectedProvince }),
                      })
                      .then((response) => response.json())
                      .then((data) => {
                          console.log("Room and User updated:", data);
                      })
                      .catch((error) => console.error("Error:", error));
                  });

                  const modal = document.getElementById("myModal");
                  const openModalBtn = document.getElementById("openModalBtn");
                  const closeModalBtn = document.querySelector(".close");

                  openModalBtn.addEventListener("click", function () {
                      console.log("hello");
                      modal.style.display = "flex";
                  });

                  closeModalBtn.onclick = function () {
                      modal.style.display = "none";
                  };

                  window.onclick = function (event) {
                      if (event.target == modal) {
                          modal.style.display = "none";
                      }
                  };

                  document.getElementById("addRoomForm").addEventListener("submit", async function (e) {
                      e.preventDefault();

                      const province = document.getElementById("provinceSelect").value;

                      try {
                          const response = await fetch("/add-room", {
                              method: "POST",
                              headers: {
                                  "Content-Type": "application/json",
                              },
                              body: JSON.stringify({ province }),
                          });

                          const result = await response.json();

                          if (result.success) {
                              // Jika berhasil, tambahkan ikon hijau
                              const newIcon = document.createElement("i");
                              newIcon.classList.add("bx", "bx-check-circle");
                              document.querySelector(".nav-side").appendChild(newIcon);
                          } else {
                              console.error(result.message);
                          }
                      } catch (error) {
                          console.error("Error:", error);
                      }
                  });

            // private
    </script>
  </body>
</html>
